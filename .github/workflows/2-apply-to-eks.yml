name: '2-Deploy Apps to EKS'

on:
  workflow_dispatch:
    inputs:
      aws_region:
        description: 'AWS Region (e.g., us-east-1)'
        required: true
        default: 'us-east-1'
      cluster_name:
        description: 'EKS Cluster Name (e.g., staging-eks-demo)'
        required: true
        default: 'staging-eks-demo'

jobs:
  deploy-to-eks:
    name: 'Deploy ALB Controller and ArgoCD'
    runs-on: ubuntu-latest

    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ github.event.inputs.aws_region }}



#-------------------------------------------------------------------------------------------------------------------------------
      # 1. Connect to the EKS Cluster
      - name: Update Kubeconfig
        run: |
          aws eks update-kubeconfig --region ${{ github.event.inputs.aws_region }} --name ${{ github.event.inputs.cluster_name }}
          echo "CORRECT: Kubeconfig updated for cluster: ${{ github.event.inputs.cluster_name }}"
          sleep 5
          echo "-----> Checking nodes:"
          kubectl get nodes
          sleep 5
#-------------------------------------------------------------------------------------------------------------------------------



      # 2. Create/Attach IAM Policy for AWS Load Balancer Controller
      - name: Ensure IAM Policy for ALB Controller
        run: |
          POLICY_NAME="AWSLoadBalancerControllerIAMPolicy"

          # Check if the policy already exists
          EXISTING_POLICY_ARN=$(aws iam list-policies --scope Local --query "Policies[?PolicyName=='$POLICY_NAME'].Arn" --output text)

          if [ -n "$EXISTING_POLICY_ARN" ]; then
            echo "Policy $POLICY_NAME already exists: $EXISTING_POLICY_ARN"
            POLICY_ARN=$EXISTING_POLICY_ARN
          else
            echo "Policy $POLICY_NAME not found. Creating it..."
            curl -o iam-policy.json https://raw.githubusercontent.com/kubernetes-sigs/aws-load-balancer-controller/main/docs/install/iam_policy.json
            POLICY_ARN=$(aws iam create-policy --policy-name $POLICY_NAME --policy-document file://iam-policy.json --query 'Policy.Arn' --output text)
            echo "Created policy: $POLICY_ARN"
          fi
          sleep 5

          # Dynamically fetch node group name
          NODE_GROUP_NAME=$(aws eks list-nodegroups \
            --cluster-name ${{ github.event.inputs.cluster_name }} \
            --query "nodegroups[0]" \
            --output text)

          if [ -z "$NODE_GROUP_NAME" ]; then
            echo "XXXXXXX: --- No node groups found in cluster ${{ github.event.inputs.cluster_name }} -----XXXXX"
            exit 1
          fi

          echo "Found node group: $NODE_GROUP_NAME"
          sleep 5

          NODE_ROLE=$(aws eks describe-nodegroup \
            --cluster-name ${{ github.event.inputs.cluster_name }} \
            --nodegroup-name "$NODE_GROUP_NAME" \
            --query "nodegroup.nodeRole" --output text)

          echo "Attaching IAM policy to node role: $NODE_ROLE"
          aws iam attach-role-policy --role-name $(basename $NODE_ROLE) --policy-arn $POLICY_ARN || true
          sleep 5
#-------------------------------------------------------------------------------------------------------------------------------





      # 3. Install AWS Load Balancer Controller
      - name: Install AWS Load Balancer Controller
        run: |
          VPC_ID=$(aws eks describe-cluster --name ${{ github.event.inputs.cluster_name }} --query "cluster.resourcesVpcConfig.vpcId" --output text)
          echo "Found VPC ID: $VPC_ID"
          sleep 5

          helm repo add eks https://aws.github.io/eks-charts
          helm repo update
          
          helm upgrade --install aws-load-balancer-controller eks/aws-load-balancer-controller \
            --namespace kube-system \
            --set clusterName=${{ github.event.inputs.cluster_name }} \
            --set serviceAccount.create=true \
            --set serviceAccount.name=aws-load-balancer-controller \
            --set vpcId=$VPC_ID \
            --set region=${{ github.event.inputs.aws_region }}
          
          echo "----------WAITING FOR 20 SECONDS FOR THE PODS TO RUN----------"
          sleep 15
          echo "---> Checking kube-system pods after ALB controller install:"
          kubectl get pods -n kube-system
 #-------------------------------------------------------------------------------------------------------------------------------





      # 4. Install ArgoCD with --insecure flag
      - name: Install ArgoCD
        run: |
          helm repo add argo https://argoproj.github.io/argo-helm
          helm repo update
          
          helm upgrade --install argocd argo/argo-cd \
            --namespace argocd \
            --create-namespace \
            --set server.service.type=ClusterIP \
            --set server.extraArgs={--insecure}
          echo "----------WAITING FOR 20 SECONDS FOR THE argocd PODS TO RUN----------"
          sleep 15
          echo "---> Checking argocd pods after ArgoCD install:"
          kubectl get pods -n argocd
#-------------------------------------------------------------------------------------------------------------------------------




      # 5. Expose ArgoCD Server via Ingress
      - name: Expose ArgoCD Server
        run: |
          kubectl wait --for=condition=ready pod -l app.kubernetes.io/name=argocd-server -n argocd --timeout=300s
          kubectl apply -f kubernetes-manifests/argocd-ingress.yml
          sleep 5
#-------------------------------------------------------------------------------------------------------------------------------



      # 6. Get the ALB DNS Name
      - name: Get ArgoCD Ingress URL
        run: |
          echo "---------Waiting for Ingress to get an address... 30 SECONDS SLEEP------"
          sleep 30
          kubectl get ingress argocd-server-ingress -n argocd -o wide
          sleep 5
          echo " --->Describe Ingress:"
          kubectl describe ingress argocd-server-ingress -n argocd
          sleep 5
          echo "=========================================================================="
          echo "Your ArgoCD URL will be available in a few minutes at:"
          kubectl get ingress argocd-server-ingress -n argocd -o jsonpath='{.status.loadBalancer.ingress[0].hostname}'
          echo ""
          echo "=========================================================================="
    
          echo " --->ArgoCD initial admin password:"
          kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d
          echo ""
          echo "Use the output of this command as the password for ArgoCD."
#-------------------------------------------------------------------------------------------------------------------------------
