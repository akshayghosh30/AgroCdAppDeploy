name: 'Testing deploy echo outputs'

on:
  workflow_dispatch:
    inputs:
      aws_region:
        description: 'AWS Region (e.g., us-east-1)'
        required: true
        default: 'us-east-2'
      cluster_name:
        description: 'EKS Cluster Name (e.g., staging-eks-demo)'
        required: true
        default: 'staging-eks-demo'

jobs:
  deploy-to-eks:
    name: 'Deploy ALB Controller and ArgoCD'
    runs-on: ubuntu-latest

    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ github.event.inputs.aws_region }}

      - name: Verify AWS Authentication
        run: |
          echo "=========================================="
          echo "Verifying AWS Authentication"
          echo "=========================================="
          CALLER_IDENTITY=$(aws sts get-caller-identity)
          echo "Caller Identity: $CALLER_IDENTITY"
          ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          echo "---> Correct: Authenticated as Account: $ACCOUNT_ID"
          echo "=========================================="

      - name: Install eksctl
        run: |
          echo "=========================================="
          echo "Installing eksctl"
          echo "=========================================="
          curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
          sudo mv /tmp/eksctl /usr/local/bin
          EKSCTL_VERSION=$(eksctl version)
          echo "---> Correct: eksctl installed: $EKSCTL_VERSION"
          echo "=========================================="
      
      #-------------------------------------------------------------------------------------------------------------------------------
      # 1. Connect to the EKS Cluster
      #-------------------------------------------------------------------------------------------------------------------------------
      - name: Update Kubeconfig
        run: |
          echo "=========================================="
          echo "Connecting to EKS Cluster"
          echo "=========================================="
          echo "Region: ${{ github.event.inputs.aws_region }}"
          echo "Cluster: ${{ github.event.inputs.cluster_name }}"
          
          aws eks update-kubeconfig --region ${{ github.event.inputs.aws_region }} --name ${{ github.event.inputs.cluster_name }}
          echo "---> Correct: Kubeconfig updated"
          
          echo ""
          echo "Checking cluster nodes:"
          kubectl get nodes -o wide
          
          NODE_COUNT=$(kubectl get nodes --no-headers | wc -l)
          echo ""
          echo "---> Correct: Found $NODE_COUNT node(s) in the cluster"
          echo "=========================================="
          sleep 3

      #-------------------------------------------------------------------------------------------------------------------------------
      # --- NEW STEP TO CHECK INGRESS AND ALB STATUS ---
      #-------------------------------------------------------------------------------------------------------------------------------
      - name: Check Ingress and ALB Status
        run: |
          echo "=========================================="
          echo "Checking Ingresses in 'argocd' namespace"
          echo "=========================================="
          kubectl get ingress -n argocd
          echo "---"
          kubectl describe ingress argocd-server-ingress -n argocd
          echo "=========================================="
          
          echo ""
          echo "=========================================="
          echo "Checking Ingresses in 'default' namespace"
          echo "=========================================="
          kubectl get ingress -n default
          echo "---"
          kubectl describe ingress app-main-ingress -n default
          echo "=========================================="

          echo ""
          echo "=========================================="
          echo "Attempting to find the attached ALB Hostname..."
          echo "=========================================="
          ALB_HOSTNAME=$(kubectl get ingress argocd-server-ingress -n argocd -o jsonpath='{.status.loadBalancer.ingress[0].hostname}' 2>/dev/null || echo "")

          if [ -n "$ALB_HOSTNAME" ]; then
            echo "--->  SUCCESS: Found ALB Hostname: $ALB_HOSTNAME"
          else
            echo "--->  ALERT: Could not find ALB Hostname attached to 'argocd-server-ingress'."
          fi
          echo "=========================================="