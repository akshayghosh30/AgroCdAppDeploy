
name: CI/CD Pipeline

on:
  push:
    branches:
      - main
    tags:
      - 'v*.*.*'

env:
  ECR_REGISTRY: 626635399726.dkr.ecr.us-east-2.amazonaws.com
  ECR_REPOSITORY: argocd/apps
  AWS_REGION: us-east-2

jobs:
  test:
    runs-on: ubuntu-latest
    env:
      APIHOST: ${{ secrets.APIHOST }}
      APIKEY: ${{ secrets.APIKEY }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - run: python -m unittest discover -s tests

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    outputs:
      sha: ${{ steps.short-sha.outputs.sha }} 
    steps:
      - uses: actions/checkout@v4
      - name: Get short SHA
        id: short-sha
        run: echo "::set-output name=sha::$(git rev-parse --short=7 ${{ github.sha }})"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Prepare Docker Tags
        id: docker-tags
        run: |
          COMMIT_SHA=${{ steps.short-sha.outputs.sha }}
          echo "COMMIT_SHA_TAG=$COMMIT_SHA" >> $GITHUB_ENV
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION_TAG=${GITHUB_REF/refs\/tags\//}
            echo "VERSION_TAG=$VERSION_TAG" >> $GITHUB_ENV
            TAGS="$VERSION_TAG,$COMMIT_SHA,v1"
          else
            TAGS="$COMMIT_SHA,v1"
          fi
          echo "DOCKER_IMAGE_TAGS=$TAGS" >> $GITHUB_ENV

      - name: Build and Push Docker image
        run: |
          ECR_IMAGE=${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}

          # Build Docker image
          docker build -t $ECR_IMAGE .

          # Tag and Push Docker image for each determined tag
          IFS=',' read -ra TAGS <<< "$DOCKER_IMAGE_TAGS"
          for TAG in "${TAGS[@]}"; do
            docker tag $ECR_IMAGE $ECR_IMAGE:$TAG
            docker push $ECR_IMAGE:$TAG
          done

  update-deployment:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure Git
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"

      - name: Update Deployment Image
        run: |
          git pull --rebase origin main
          IMAGE_TAG=${{ needs.build-and-push.outputs.sha }}
          ECR_IMAGE=${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}
          sed -i 's|image: .*|image: '"$ECR_IMAGE"':'"$IMAGE_TAG"'|' k8s/base/deployment.yaml
          git add k8s/base/deployment.yaml
          git commit -m "Update image version to $IMAGE_TAG"
          git push

      - name: Install Argo CD CLI
        run: |
          curl -sSL -o /usr/local/bin/argocd https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
          chmod +x /usr/local/bin/argocd

      - name: Login to Argo CD
        run: |
          argocd login $ARGOCD_SERVER --username admin --password $ARGOCD_AUTH_TOKEN
        env:
          ARGOCD_SERVER: ${{ secrets.ARGOCD_SERVER }}
          ARGOCD_AUTH_TOKEN: ${{ secrets.ARGOCD_AUTH_TOKEN }}

      - name: Sync Argo CD Application
        run: |
          argocd app sync $ARGOCD_APP_NAME
        env:
          ARGOCD_APP_NAME: currencyconverter-production
